#!/usr/bin/env sh
":"; //; exec ts-node --es-module-specifier-resolution=node - "$@" < "$0"

var fs = require("fs");
var path = require("path");
var program = require("commander");
var serialport = require("serialport");
var inquirer = require("inquirer");
var vorpal = require("vorpal")();
var pkg = require("../package.json");
var serverMain = require("../index");
var commands = require("../commands");
var options = {};
var whb04b = require("../dist/whb04b-4");

program
    .version(pkg.version)
    .usage("-s <secret> -p <port> [options]")
    .option("-l, --list", "list available ports then exit")
    .option("-s, --secret", "the secret key stored in the ~/.cncrc file")
    .option("-p, --port <port>", "path or name of serial port")
    .option("-b, --baudrate <baudrate>", "baud rate (default: 115200)", 115200)
    .option("--socket-address <address>", "socket address or hostname (default: localhost)", "localhost")
    .option("--socket-port <port>", "socket port (default: 8000)", 8000)
    .option("--controller-type <type>", "controller type: Grbl|Smoothie|TinyG (default: Grbl)", "Grbl")
    .option(
        "--access-token-lifetime <lifetime>",
        "access token lifetime in seconds or a time span string (default: 30d)",
        "30d"
    );

program.parse(process.argv);

var options = {
    secret: program.secret,
    port: program.port,
    baudrate: program.baudrate,
    socketAddress: program.socketAddress,
    socketPort: program.socketPort,
    controllerType: program.controllerType,
    accessTokenLifetime: program.accessTokenLifetime,
};

if (options.list) {
    serialport
        .list()
        .then(function (ports) {
            ports.forEach(function (port) {
                console.log(port.path);
            });
        })
        .catch((err) => {
            console.error(err);
            process.exit(1);
        });
    return;
}

var store = {
    controller: {
        state: {},
        settings: {},
    },
    sender: {
        status: {},
    },
};

var createServer = function (options) {
    serverMain(options, function (err, socket) {
        const controller = new whb04b.Whb04b_4(socket, options.port);

        /*
        // Grbl
        socket.on("Grbl:state", function (state) {
            store.controller.state = state;
        });
        socket.on("Grbl:settings", function (settings) {
            store.controller.settings = settings;
        });

        // Smoothie
        socket.on("Smoothie:state", function (state) {
            store.controller.state = state;
        });
        socket.on("Smoothie:settings", function (settings) {
            store.controller.settings = settings;
        });

        // TinyG
        socket.on("TinyG:state", function (state) {
            store.controller.state = state;
        });
        socket.on("TinyG:settings", function (settings) {
            store.controller.settings = settings;
        });

        // Sender
        socket.on("sender:status", function (data) {
            store.sender.status = data;
        });

        vorpal
            .mode("command")
            .description("Enters the command-line mode.")
            .delimiter(options.controllerType + ">")
            .init(function (args, callback) {
                this.log("You can now directly enter commands. To exit, type `exit`.");
                callback();
            })
            .action(function (command, callback) {
                var line = command + "\n";
                socket.emit("write", options.port, line);
                callback();
            });

        vorpal
            .command("status")
            .description("Displays sender status")
            .action(function (args, callback) {
                console.log(store.sender.status);
                callback();
            });

        vorpal
            .command("controller <command>")
            .description("Available commands: state, settings")
            .action(function (args, callback) {
                var command = args.command;
                if (command === "state") {
                    console.log(store.controller.state);
                } else if (command === "settings") {
                    console.log(store.controller.settings);
                }
                callback();
            });

        commands.forEach(function (command) {
            vorpal.command(command.command).action(function (args, callback) {
                command.action(args, function (err, eventName) {
                    if (err) {
                        console.log("error");
                        callback(err);
                        return;
                    }

                    var eventArgs = Array.prototype.slice.call(arguments, 2); // err, eventName
                    socket.emit.apply(socket, [eventName, options.port].concat(eventArgs));
                    console.log("ok");
                    callback();
                });
            });
        });

        console.log("");
        console.log('Type "help" to display supported options:');
        */

        vorpal.delimiter("pendant$").show();
    });
};

if (options.port) {
    createServer(options);
    return;
}

serialport
    .list()
    .then(function (ports) {
        const choices = ports.map(function (port) {
            return port.path;
        });

        inquirer
            .prompt([
                {
                    type: "list",
                    name: "port",
                    message: "Specify which port you want to use?",
                    choices: choices,
                },
            ])
            .then(function (answers) {
                options.port = answers.port;

                createServer(options);
            });
    })
    .catch((err) => {
        console.error(err);
        process.exit(1);
    });
